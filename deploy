#!/usr/bin/env python
import dotenv

dotenv.read_dotenv('behind/.env')

import argparse
import sys
import subprocess
import os
import importlib

import version
from behind.behind import jarvis

description = "Behind API Server build and push docker image to Google Container Registry"
parser = argparse.ArgumentParser(description=description)
parser.add_argument('-bp', '--part', help='Part to bump: Major, minor, patch', dest='part')
args = parser.parse_args()

# Copy last version
last_version = version.__version__[:]

# Bump version
subprocess.run(['bump2version', args.part])
# Reload version module so __version__ variable refreshes
importlib.reload(version)

# Change dotenv file to production dotenv
print("Copy .env.production to .env")
subprocess.run(['cp', 'behind/.env.production', 'behind/.env'])

# Authenticate docker configuration
print("Build and push docker image.")
subprocess.run(["gcloud", "auth", "configure-docker"])
# Build docker image
project_id = os.getenv('GS_PROJECT_ID', '')
if project_id == '':
    print("Google Project ID does not exist.")
    sys.exit(0)
docker_image_url = f"gcr.io/{project_id}/behind-api:{version.__version__}"
subprocess.run(["docker", "build", "-t", docker_image_url, "--file=Dockerfile.production", "."])
subprocess.run(["docker", "push", docker_image_url])
print("Done!")

# Deploy to GKE
print('Deploying to GKE ...')
subprocess.run(
    [
        "kubectl",
        "set",
        "image",
        "deploy/behind-api-deployment",
        f"behind-api={docker_image_url}",
        "--record"
    ]
)
subprocess.run(["kubectl", "rollout", "status", "deployment", "behind-api-deployment"])
print('Deployed.')

commits = "\n".join(subprocess.check_output(
    ['git', 'log', f'v{last_version}..v{version.__version__}', '--oneline'],
    stderr=subprocess.STDOUT).decode().split('\n'))
jarvis.send_slack(f"""
Production deployment: {version.__version__}
Tag difference from last version:
{commits}
""")
